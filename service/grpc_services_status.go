// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source: pb/profile.proto
package service

import (
	"sort"
	"sync"

	"golang.org/x/net/context"

	gomeetContext "github.com/gomeet/gomeet/utils/context"
	"github.com/gomeet/gomeet/utils/log"

	pb "github.com/gomeet-examples/svc-profile/pb"
	// SUB-SERVICES DEFINITION : import-pb
	// svc{{SubServiceNamePascalCase}}Pb "github.com/gomeet-examples/svc-{{SubServiceNameKebabCase}}/pb"
	// END SUB-SERVICES DEFINITION : import-pb
)

type servicesStatusByName []*pb.ServiceStatus

func (n servicesStatusByName) Len() int           { return len(n) }
func (n servicesStatusByName) Swap(i, j int)      { n[i], n[j] = n[j], n[i] }
func (n servicesStatusByName) Less(i, j int) bool { return n[i].Name < n[j].Name }

func serviceStatusErrorHandler(ctx context.Context, ver *pb.VersionResponse, err error, logM string) *pb.ServiceStatus {
	log.Error(ctx, logM, err, log.Fields{
		"Svc": ver.GetName(),
	})

	return &pb.ServiceStatus{
		Name:    ver.GetName(),
		Version: ver.GetVersion(),
		Status:  pb.ServiceStatus_UNAVAILABLE,
		EMsg:    err.Error(),
	}
}

func serviceStatusSuccessHandler(ver *pb.VersionResponse) *pb.ServiceStatus {
	return &pb.ServiceStatus{
		Name:    ver.GetName(),
		Version: ver.GetVersion(),
		Status:  pb.ServiceStatus_OK,
		EMsg:    "",
	}
}

func svcCurrentStatus(s *profileServer, ctx context.Context, svcCtx context.Context) *pb.ServiceStatus {
	ver, err := s.Version(ctx, &pb.EmptyMessage{})
	if err != nil {
		return serviceStatusErrorHandler(ctx, &pb.VersionResponse{name, version}, err, "Version call error")
	}
	return serviceStatusSuccessHandler(&pb.VersionResponse{ver.GetName(), ver.GetVersion()})
}

// SUB-SERVICES DEFINITION : func-status
// func svc{{SubServiceNamePascalCase}}Status(s *profileServer, ctx context.Context, svcCtx context.Context) *pb.ServiceStatus {
//   if err := s.init{{SubServiceNamePascalCase}}Client(); err != nil {
//     return serviceStatusErrorHandler(ctx, &pb.VersionResponse{"svc-{{SubServiceNameKebabCase}}", "unknow"}, err, "Init client error")
//   }
//   ver, err := s.svc{{SubServiceNamePascalCase}}GrpcClient.Version(svcCtx, &svc{{SubServiceNamePascalCase}}Pb.EmptyMessage{})
//   if err != nil {
//     return serviceStatusErrorHandler(ctx, &pb.VersionResponse{"svc-{{SubServiceNameKebabCase}}", "unknow"}, err, "Version call error")
//   }
//   return serviceStatusSuccessHandler(&pb.VersionResponse{ver.GetName(), ver.GetVersion()})
// }

// END SUB-SERVICES DEFINITION : func-status

func (s *profileServer) ServicesStatus(ctx context.Context, req *pb.EmptyMessage) (*pb.ServicesStatusList, error) {
	log.Debug(ctx, "message call", log.Fields{"req": req})

	var ss []*pb.ServiceStatus
	var wg sync.WaitGroup
	var mu = &sync.Mutex{}
	svcCtx := gomeetContext.NewSubServiceContext(ctx)

	fns := []func(*profileServer, context.Context, context.Context) *pb.ServiceStatus{
		svcCurrentStatus,
		// SUB-SERVICES DEFINITION : call-status
		// svc{{SubServiceNamePascalCase}}Status,

		// END SUB-SERVICES DEFINITION : call-status
	}

	wg.Add(len(fns))
	for _, fn := range fns {
		go func(f func(*profileServer, context.Context, context.Context) *pb.ServiceStatus) {
			defer wg.Done()
			svcStatus := f(s, ctx, svcCtx)
			mu.Lock()
			defer mu.Unlock()
			ss = append(ss, svcStatus)
		}(fn)
	}
	wg.Wait()

	sort.Sort(servicesStatusByName(ss))

	return &pb.ServicesStatusList{Services: ss}, nil
}
