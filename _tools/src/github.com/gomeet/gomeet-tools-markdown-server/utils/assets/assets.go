// Code generated by go-bindata.
// sources:
// assets/css/markdown-plain.css
// assets/index.html
// assets/markdown.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsCssMarkdownPlainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xc1\x8e\xdb\x2a\x14\x86\xd7\xe1\x29\x8e\x34\x8b\xdc\xf1\xc5\x0e\xc9\x24\x53\x09\xab\x6a\xb7\xdd\x8d\xd4\x79\x01\x0c\xc4\xa0\x60\x0e\x05\xd2\x24\xaa\xe6\xdd\x2b\x64\x3b\x4d\xd5\xb4\x8b\xaa\xbb\x04\xfd\xdf\xc7\x7f\x38\xfe\x68\x87\x80\x31\xc3\x31\xba\xff\x4c\xce\x81\xaf\x56\x7b\xf4\x39\x35\x3d\x62\xef\xb4\x08\x36\x35\x12\x87\x95\x4c\xe9\xc3\x5e\x0c\xd6\x5d\xde\xbf\xbc\xfe\xff\x59\xf8\xc4\xb7\x8c\xd1\x77\x8c\xd1\x2d\x63\x36\x0b\x67\x65\xf9\x37\xfe\x7a\x6c\xc9\x5f\x8a\x75\xb4\xfb\x7f\x6f\xfe\xe4\x25\xfa\x84\x4e\x64\x31\xcb\x1f\x5b\x42\x56\x55\x55\x41\xbe\x04\xec\xa3\x08\xe6\x02\x55\x55\xad\x08\xe9\x50\x5d\xe0\x1b\x59\x14\x69\x3d\x0a\x38\x2c\x5f\x5e\xa1\x4c\xbd\xa4\x90\x84\x4f\x75\x2a\x45\x5b\xf2\x46\xcc\x9a\x82\xd9\x50\x30\x4f\x14\xcc\x96\x82\xd9\x51\x30\xcf\xf7\xf9\xc2\x14\xc1\xcc\x4a\x54\xfa\xd7\xe4\x4d\xd9\x25\x85\x01\x3d\xa6\x20\xa4\x2e\xc0\xd8\xd8\x89\x0b\x1e\xf3\xd4\x96\x98\x3c\xb8\x22\x19\x44\xec\xad\xe7\xc0\x4a\x70\x9e\xe1\x7a\x08\xe2\x98\xb1\x2d\x07\xe7\xfa\x64\x55\x36\x1c\x9e\x59\xd4\x43\x09\x7b\xf1\xb5\x64\x3b\x21\x0f\x7d\xc4\xa3\x57\xb5\x44\x87\x91\xc3\x83\xd6\xba\x25\x8b\x0e\xa3\xd2\xb1\xee\x30\x67\x1c\x38\xac\xc3\x19\x12\x3a\xab\xe0\x41\x29\xd5\x92\x45\x10\x4a\x59\xdf\x73\x58\x47\x3d\xc0\xf6\xc6\x2a\xae\xd3\x9d\xb4\xed\x4d\xe6\xd0\xa1\x2b\x48\xd6\xe7\x5c\x2b\x2d\x31\x8a\x6c\xd1\x73\xf0\xe8\xf5\x4c\xa5\x20\x7c\x93\x74\x28\xf0\xdc\xa4\xeb\xba\xf6\x66\x9c\x72\x11\x6b\x36\xbb\xe9\xae\xa4\x65\xd1\x14\xe0\x7e\x99\xfb\x5b\xa2\x10\x28\xcc\x4b\x70\xd6\xeb\xda\x4c\x35\xd7\xcd\x7a\x77\x17\xfd\xf1\xa8\x75\xc6\xc0\x61\x33\xa5\xc6\xcd\x0c\x22\x1e\x14\x9e\xfc\xb4\x9b\x70\x95\x5f\x5b\xb1\x51\x0c\xac\x79\x9a\xc8\xce\xa1\x3c\x7c\x39\x62\x2e\xc1\x9b\x8f\xe2\x77\xeb\x78\x23\x21\xfe\x31\xf0\xf3\x13\x14\xe0\x7b\x00\x00\x00\xff\xff\x38\xce\xac\x5e\xe5\x03\x00\x00")

func assetsCssMarkdownPlainCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsCssMarkdownPlainCss,
		"assets/css/markdown-plain.css",
	)
}

func assetsCssMarkdownPlainCss() (*asset, error) {
	bytes, err := assetsCssMarkdownPlainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/css/markdown-plain.css", size: 997, mode: os.FileMode(420), modTime: time.Unix(1518615718, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x90\xb1\x4e\xc4\x30\x0c\x86\xe7\xe4\x29\x72\xd9\x5b\xbf\x80\x2f\x0b\x30\x30\x20\x90\x60\x61\x0c\xad\xb9\x46\x97\x73\x51\x1c\x0a\xa7\xaa\xef\x8e\xd2\xb4\xdc\xf4\x4b\xb6\xbe\xef\x77\x82\x87\xfb\xe7\xbb\xb7\xf7\x97\x07\x33\xe4\x4b\x74\x1a\xf7\x20\xdf\x3b\xad\x30\x87\x1c\xc9\x3d\xf9\x74\xee\xc7\x1f\x36\xaf\x94\x26\x4a\x08\x75\xac\x15\xc6\xc0\x67\x93\x28\x1e\xad\xe4\x6b\x24\x19\x88\xb2\x35\x43\xa2\xcf\xa3\x05\x2f\x42\x59\xa0\x13\x81\xcb\x66\x68\xbe\xa2\x0f\xdc\x76\x22\xd6\x69\x84\x5a\x83\x1f\x63\x7f\x2d\xb6\x43\xd3\x18\xf6\x53\x38\xf9\x1c\x46\x36\x4d\x53\x86\xec\x27\xa7\x95\x42\xbf\x6b\xad\x7b\xe4\x9e\x7e\x11\x7c\x59\xc3\xba\xdf\xe0\x6e\xe4\x4c\x9c\x37\x52\xa8\x2b\x9e\x95\xfe\x8e\x25\xe6\x39\x79\x3e\x91\x69\x97\x45\x2b\x55\xce\x77\x37\xef\x7e\x23\xcc\x73\xbb\x2c\xd6\xad\x51\x5a\x10\x62\xa8\x34\x71\xbf\x92\x08\xab\x0f\xe1\xbf\x02\xa1\x3e\x02\xa1\xfe\xe0\x5f\x00\x00\x00\xff\xff\xcf\xe3\x14\x02\x59\x01\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 345, mode: os.FileMode(420), modTime: time.Unix(1518615718, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsMarkdownHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\x41\x4e\xc3\x30\x10\x45\xd7\xf1\x29\x5c\xef\xd3\xb9\xc0\xc4\x9b\x02\x12\x0b\x04\x12\x6c\x58\x0e\xc9\x40\xac\x3a\x93\x28\x63\x05\xaa\xaa\x47\xe1\x10\x5c\x89\x93\x20\xc7\x29\x2b\x4b\xff\xeb\xbf\x67\x0d\xee\x6e\x1e\x0f\x2f\xaf\x4f\xb7\xb6\x4f\x43\xf4\x06\xaf\x0f\x53\xe7\x4d\x85\x29\xa4\xc8\xfe\x81\xe6\x63\x37\x7e\x8a\x7d\xe6\x79\xe1\x19\xa1\xc4\xa6\xc2\x18\xe4\x68\x67\x8e\x8d\xd3\x74\x8a\xac\x3d\x73\x72\xb6\x9f\xf9\xbd\x71\x40\xaa\x9c\x14\x5a\x55\x18\x36\x42\x3d\x45\x0a\xb2\x6f\x55\x9d\x37\x08\x45\x83\x6f\x63\x77\xca\xb4\x5d\x5d\x5b\xa1\x25\x7c\x50\x0a\xa3\xd8\xba\xce\xa1\xd0\xe2\x4d\x55\x21\x5d\xb1\xce\xdf\x4b\xc7\x5f\x08\xb4\xe6\x3a\x91\xd8\x36\x92\x6a\xe3\x94\x27\xe7\x7f\xbf\x7f\x10\x72\x9a\xeb\xf3\x79\x7f\x17\x22\x0b\x0d\x7c\xb9\x98\x0a\x61\xc5\x6d\xae\x76\x94\xc4\x92\x36\x91\x72\x9b\xb5\xde\xe4\xd1\xa1\x54\x65\xf3\xdf\x20\x94\xaf\x22\xac\x77\xfa\x0b\x00\x00\xff\xff\xff\xb3\x5e\x1a\x3e\x01\x00\x00")

func assetsMarkdownHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsMarkdownHtml,
		"assets/markdown.html",
	)
}

func assetsMarkdownHtml() (*asset, error) {
	bytes, err := assetsMarkdownHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/markdown.html", size: 318, mode: os.FileMode(420), modTime: time.Unix(1518615718, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/css/markdown-plain.css": assetsCssMarkdownPlainCss,
	"assets/index.html": assetsIndexHtml,
	"assets/markdown.html": assetsMarkdownHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"markdown-plain.css": &bintree{assetsCssMarkdownPlainCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
		"markdown.html": &bintree{assetsMarkdownHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

