// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source: pb/profile.proto
package client

import (
	"crypto/tls"
	"crypto/x509"
	"fmt"
	"io/ioutil"
	"net"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"

	pb "github.com/gomeet-examples/svc-profile/pb"
)

type GomeetClient struct {
	address           string
	caCertificate     string
	clientCertificate string
	clientPrivateKey  string
	cc                *grpc.ClientConn
	c                 pb.ProfileClient
}

func NewGomeetClient(
	addr string,
	timeout int,
	caCertificate string,
	clientCertificate string,
	clientPrivateKey string,
) (*GomeetClient, error) {
	// set up a connection to the server
	var (
		cc  *grpc.ClientConn
		err error
	)
	timeoutDuration := time.Duration(timeout) * time.Second
	if caCertificate != "" && clientCertificate != "" && clientPrivateKey != "" {
		// load the client's key pair
		clientKeyPair, err := tls.LoadX509KeyPair(clientCertificate, clientPrivateKey)
		if err != nil {
			return nil, fmt.Errorf("failed to load gRPC client key pair: %v", err)
		}

		// create a certificate pool from the CA
		certPool := x509.NewCertPool()
		ca, err := ioutil.ReadFile(caCertificate)
		if err != nil {
			return nil, fmt.Errorf("failed to read CA certificate: %v", err)
		}
		if ok := certPool.AppendCertsFromPEM(ca); !ok {
			return nil, fmt.Errorf("failed to build certificate pool")
		}

		// set up the TLS credentials
		serverHost, _, err := net.SplitHostPort(addr)
		if err != nil {
			return nil, fmt.Errorf("failed to parse server hostname in %s: %v", addr, err)
		}
		clientCredentials := credentials.NewTLS(&tls.Config{
			ServerName:   serverHost,
			Certificates: []tls.Certificate{clientKeyPair},
			RootCAs:      certPool,
		})

		cc, err = grpc.Dial(addr, grpc.WithTimeout(timeoutDuration), grpc.WithTransportCredentials(clientCredentials))
	} else {
		cc, err = grpc.Dial(addr, grpc.WithTimeout(timeoutDuration), grpc.WithInsecure())
	}
	if err != nil {
		return nil, fmt.Errorf("gRPC connect fail - %v", err)
	}

	// Get ProfileClient
	c := pb.NewProfileClient(cc)

	return &GomeetClient{addr, caCertificate, clientCertificate, clientPrivateKey, cc, c}, nil
}

// Close : close grpc connection `cc`
func (c *GomeetClient) Close() {
	c.cc.Close()
}

// GetGRPCClient : getter on internal gRPC client
func (c GomeetClient) GetGRPCClient() pb.ProfileClient {
	return c.c
}

// Return address
func (c GomeetClient) GetAddress() string {
	return c.address
}

// GetCaCertificate return caCertificate
func (c GomeetClient) GetCaCertificate() string {
	return c.caCertificate
}

// GetCertificate return clientCertificate
func (c GomeetClient) GetCertificate() string {
	return c.clientCertificate
}

// GetPrivateKey return clientPrivateKey
func (c GomeetClient) GetPrivateKey() string {
	return c.clientPrivateKey
}
