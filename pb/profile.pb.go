// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/profile.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/profile.proto

It has these top-level messages:
	EmptyMessage
	VersionResponse
	ServiceStatus
	ServicesStatusList
	ProfileInfo
	ProfileRequest
	ProfileResponse
	ProfileResponseLight
	ProfileCreationRequest
	ProfileListRequest
	ProfileList
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/mwitkow/go-proto-validators"
import _ "github.com/gomeet/go-proto-gomeetfaker"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Genders int32

const (
	Genders_UNKNOW Genders = 0
	Genders_MALE   Genders = 1
	Genders_FEMALE Genders = 2
)

var Genders_name = map[int32]string{
	0: "UNKNOW",
	1: "MALE",
	2: "FEMALE",
}
var Genders_value = map[string]int32{
	"UNKNOW": 0,
	"MALE":   1,
	"FEMALE": 2,
}

func (x Genders) String() string {
	return proto.EnumName(Genders_name, int32(x))
}
func (Genders) EnumDescriptor() ([]byte, []int) { return fileDescriptorProfile, []int{0} }

type ServiceStatus_Status int32

const (
	ServiceStatus_OK          ServiceStatus_Status = 0
	ServiceStatus_UNAVAILABLE ServiceStatus_Status = 1
)

var ServiceStatus_Status_name = map[int32]string{
	0: "OK",
	1: "UNAVAILABLE",
}
var ServiceStatus_Status_value = map[string]int32{
	"OK":          0,
	"UNAVAILABLE": 1,
}

func (x ServiceStatus_Status) String() string {
	return proto.EnumName(ServiceStatus_Status_name, int32(x))
}
func (ServiceStatus_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorProfile, []int{2, 0}
}

type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{0} }

// VersionMessage represents a version message
type VersionResponse struct {
	// Id represents the message identifier.
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *VersionResponse) Reset()                    { *m = VersionResponse{} }
func (m *VersionResponse) String() string            { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()               {}
func (*VersionResponse) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{1} }

func (m *VersionResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// SeviceStatus represents a sub services status message
type ServiceStatus struct {
	Name    string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string               `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Status  ServiceStatus_Status `protobuf:"varint,3,opt,name=status,proto3,enum=grpc.gomeetexamples.profile.ServiceStatus_Status" json:"status,omitempty"`
	EMsg    string               `protobuf:"bytes,4,opt,name=e_msg,json=eMsg,proto3" json:"e_msg,omitempty"`
}

func (m *ServiceStatus) Reset()                    { *m = ServiceStatus{} }
func (m *ServiceStatus) String() string            { return proto.CompactTextString(m) }
func (*ServiceStatus) ProtoMessage()               {}
func (*ServiceStatus) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{2} }

func (m *ServiceStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceStatus) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ServiceStatus) GetStatus() ServiceStatus_Status {
	if m != nil {
		return m.Status
	}
	return ServiceStatus_OK
}

func (m *ServiceStatus) GetEMsg() string {
	if m != nil {
		return m.EMsg
	}
	return ""
}

// ServicesStatusList is the sub services status list
type ServicesStatusList struct {
	Services []*ServiceStatus `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *ServicesStatusList) Reset()                    { *m = ServicesStatusList{} }
func (m *ServicesStatusList) String() string            { return proto.CompactTextString(m) }
func (*ServicesStatusList) ProtoMessage()               {}
func (*ServicesStatusList) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{3} }

func (m *ServicesStatusList) GetServices() []*ServiceStatus {
	if m != nil {
		return m.Services
	}
	return nil
}

// ProfileInfo encodes information about a profile.
type ProfileInfo struct {
	Uuid      string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Gender    Genders `protobuf:"varint,2,opt,name=gender,proto3,enum=grpc.gomeetexamples.profile.Genders" json:"gender,omitempty"`
	Email     string  `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Name      string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Birthday  string  `protobuf:"bytes,5,opt,name=birthday,proto3" json:"birthday,omitempty"`
	CreatedAt string  `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt string  `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt string  `protobuf:"bytes,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (m *ProfileInfo) Reset()                    { *m = ProfileInfo{} }
func (m *ProfileInfo) String() string            { return proto.CompactTextString(m) }
func (*ProfileInfo) ProtoMessage()               {}
func (*ProfileInfo) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{4} }

func (m *ProfileInfo) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ProfileInfo) GetGender() Genders {
	if m != nil {
		return m.Gender
	}
	return Genders_UNKNOW
}

func (m *ProfileInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ProfileInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProfileInfo) GetBirthday() string {
	if m != nil {
		return m.Birthday
	}
	return ""
}

func (m *ProfileInfo) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *ProfileInfo) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *ProfileInfo) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

// ProfileRequest encodes a profile identifier.
type ProfileRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *ProfileRequest) Reset()                    { *m = ProfileRequest{} }
func (m *ProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*ProfileRequest) ProtoMessage()               {}
func (*ProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{5} }

func (m *ProfileRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

// ProfileResponse encodes the result of a profile operation.
type ProfileResponse struct {
	Ok   bool         `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Info *ProfileInfo `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (m *ProfileResponse) Reset()                    { *m = ProfileResponse{} }
func (m *ProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*ProfileResponse) ProtoMessage()               {}
func (*ProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{6} }

func (m *ProfileResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ProfileResponse) GetInfo() *ProfileInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// ProfileResponseLight encodes the result of a profile operation.
type ProfileResponseLight struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (m *ProfileResponseLight) Reset()                    { *m = ProfileResponseLight{} }
func (m *ProfileResponseLight) String() string            { return proto.CompactTextString(m) }
func (*ProfileResponseLight) ProtoMessage()               {}
func (*ProfileResponseLight) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{7} }

func (m *ProfileResponseLight) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

// ProfileCreationRequest encodes a profile creation request.
type ProfileCreationRequest struct {
	Gender   Genders `protobuf:"varint,1,opt,name=gender,proto3,enum=grpc.gomeetexamples.profile.Genders" json:"gender,omitempty"`
	Email    string  `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Name     string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Birthday string  `protobuf:"bytes,4,opt,name=birthday,proto3" json:"birthday,omitempty"`
}

func (m *ProfileCreationRequest) Reset()                    { *m = ProfileCreationRequest{} }
func (m *ProfileCreationRequest) String() string            { return proto.CompactTextString(m) }
func (*ProfileCreationRequest) ProtoMessage()               {}
func (*ProfileCreationRequest) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{8} }

func (m *ProfileCreationRequest) GetGender() Genders {
	if m != nil {
		return m.Gender
	}
	return Genders_UNKNOW
}

func (m *ProfileCreationRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ProfileCreationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProfileCreationRequest) GetBirthday() string {
	if m != nil {
		return m.Birthday
	}
	return ""
}

// ProfileListRequest encodes a set of criteria for the retrieval of a list of profiles.
type ProfileListRequest struct {
	PageNumber         uint32  `protobuf:"varint,1,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize           uint32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Order              string  `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	ExcludeSoftDeleted bool    `protobuf:"varint,4,opt,name=exclude_soft_deleted,json=excludeSoftDeleted,proto3" json:"exclude_soft_deleted,omitempty"`
	SoftDeletedOnly    bool    `protobuf:"varint,5,opt,name=soft_deleted_only,json=softDeletedOnly,proto3" json:"soft_deleted_only,omitempty"`
	Gender             Genders `protobuf:"varint,6,opt,name=gender,proto3,enum=grpc.gomeetexamples.profile.Genders" json:"gender,omitempty"`
}

func (m *ProfileListRequest) Reset()                    { *m = ProfileListRequest{} }
func (m *ProfileListRequest) String() string            { return proto.CompactTextString(m) }
func (*ProfileListRequest) ProtoMessage()               {}
func (*ProfileListRequest) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{9} }

func (m *ProfileListRequest) GetPageNumber() uint32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *ProfileListRequest) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ProfileListRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *ProfileListRequest) GetExcludeSoftDeleted() bool {
	if m != nil {
		return m.ExcludeSoftDeleted
	}
	return false
}

func (m *ProfileListRequest) GetSoftDeletedOnly() bool {
	if m != nil {
		return m.SoftDeletedOnly
	}
	return false
}

func (m *ProfileListRequest) GetGender() Genders {
	if m != nil {
		return m.Gender
	}
	return Genders_UNKNOW
}

// ProfileList encodes the result of a ProfileListRequest.
type ProfileList struct {
	ResultSetSize uint32         `protobuf:"varint,1,opt,name=result_set_size,json=resultSetSize,proto3" json:"result_set_size,omitempty"`
	HasMore       bool           `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	Profiles      []*ProfileInfo `protobuf:"bytes,3,rep,name=profiles" json:"profiles,omitempty"`
}

func (m *ProfileList) Reset()                    { *m = ProfileList{} }
func (m *ProfileList) String() string            { return proto.CompactTextString(m) }
func (*ProfileList) ProtoMessage()               {}
func (*ProfileList) Descriptor() ([]byte, []int) { return fileDescriptorProfile, []int{10} }

func (m *ProfileList) GetResultSetSize() uint32 {
	if m != nil {
		return m.ResultSetSize
	}
	return 0
}

func (m *ProfileList) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *ProfileList) GetProfiles() []*ProfileInfo {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func init() {
	proto.RegisterType((*EmptyMessage)(nil), "grpc.gomeetexamples.profile.EmptyMessage")
	golang_proto.RegisterType((*EmptyMessage)(nil), "grpc.gomeetexamples.profile.EmptyMessage")
	proto.RegisterType((*VersionResponse)(nil), "grpc.gomeetexamples.profile.VersionResponse")
	golang_proto.RegisterType((*VersionResponse)(nil), "grpc.gomeetexamples.profile.VersionResponse")
	proto.RegisterType((*ServiceStatus)(nil), "grpc.gomeetexamples.profile.ServiceStatus")
	golang_proto.RegisterType((*ServiceStatus)(nil), "grpc.gomeetexamples.profile.ServiceStatus")
	proto.RegisterType((*ServicesStatusList)(nil), "grpc.gomeetexamples.profile.ServicesStatusList")
	golang_proto.RegisterType((*ServicesStatusList)(nil), "grpc.gomeetexamples.profile.ServicesStatusList")
	proto.RegisterType((*ProfileInfo)(nil), "grpc.gomeetexamples.profile.ProfileInfo")
	golang_proto.RegisterType((*ProfileInfo)(nil), "grpc.gomeetexamples.profile.ProfileInfo")
	proto.RegisterType((*ProfileRequest)(nil), "grpc.gomeetexamples.profile.ProfileRequest")
	golang_proto.RegisterType((*ProfileRequest)(nil), "grpc.gomeetexamples.profile.ProfileRequest")
	proto.RegisterType((*ProfileResponse)(nil), "grpc.gomeetexamples.profile.ProfileResponse")
	golang_proto.RegisterType((*ProfileResponse)(nil), "grpc.gomeetexamples.profile.ProfileResponse")
	proto.RegisterType((*ProfileResponseLight)(nil), "grpc.gomeetexamples.profile.ProfileResponseLight")
	golang_proto.RegisterType((*ProfileResponseLight)(nil), "grpc.gomeetexamples.profile.ProfileResponseLight")
	proto.RegisterType((*ProfileCreationRequest)(nil), "grpc.gomeetexamples.profile.ProfileCreationRequest")
	golang_proto.RegisterType((*ProfileCreationRequest)(nil), "grpc.gomeetexamples.profile.ProfileCreationRequest")
	proto.RegisterType((*ProfileListRequest)(nil), "grpc.gomeetexamples.profile.ProfileListRequest")
	golang_proto.RegisterType((*ProfileListRequest)(nil), "grpc.gomeetexamples.profile.ProfileListRequest")
	proto.RegisterType((*ProfileList)(nil), "grpc.gomeetexamples.profile.ProfileList")
	golang_proto.RegisterType((*ProfileList)(nil), "grpc.gomeetexamples.profile.ProfileList")
	proto.RegisterEnum("grpc.gomeetexamples.profile.Genders", Genders_name, Genders_value)
	golang_proto.RegisterEnum("grpc.gomeetexamples.profile.Genders", Genders_name, Genders_value)
	proto.RegisterEnum("grpc.gomeetexamples.profile.ServiceStatus_Status", ServiceStatus_Status_name, ServiceStatus_Status_value)
	golang_proto.RegisterEnum("grpc.gomeetexamples.profile.ServiceStatus_Status", ServiceStatus_Status_name, ServiceStatus_Status_value)
}
func (this *EmptyMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EmptyMessage)
	if !ok {
		that2, ok := that.(EmptyMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *VersionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionResponse)
	if !ok {
		that2, ok := that.(VersionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *ServiceStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceStatus)
	if !ok {
		that2, ok := that.(ServiceStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.EMsg != that1.EMsg {
		return false
	}
	return true
}
func (this *ServicesStatusList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesStatusList)
	if !ok {
		that2, ok := that.(ServicesStatusList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Services) != len(that1.Services) {
		return false
	}
	for i := range this.Services {
		if !this.Services[i].Equal(that1.Services[i]) {
			return false
		}
	}
	return true
}
func (this *ProfileInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProfileInfo)
	if !ok {
		that2, ok := that.(ProfileInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	if this.Gender != that1.Gender {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Birthday != that1.Birthday {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.UpdatedAt != that1.UpdatedAt {
		return false
	}
	if this.DeletedAt != that1.DeletedAt {
		return false
	}
	return true
}
func (this *ProfileRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProfileRequest)
	if !ok {
		that2, ok := that.(ProfileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	return true
}
func (this *ProfileResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProfileResponse)
	if !ok {
		that2, ok := that.(ProfileResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *ProfileResponseLight) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProfileResponseLight)
	if !ok {
		that2, ok := that.(ProfileResponseLight)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	return true
}
func (this *ProfileCreationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProfileCreationRequest)
	if !ok {
		that2, ok := that.(ProfileCreationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Gender != that1.Gender {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Birthday != that1.Birthday {
		return false
	}
	return true
}
func (this *ProfileListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProfileListRequest)
	if !ok {
		that2, ok := that.(ProfileListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PageNumber != that1.PageNumber {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if this.Order != that1.Order {
		return false
	}
	if this.ExcludeSoftDeleted != that1.ExcludeSoftDeleted {
		return false
	}
	if this.SoftDeletedOnly != that1.SoftDeletedOnly {
		return false
	}
	if this.Gender != that1.Gender {
		return false
	}
	return true
}
func (this *ProfileList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProfileList)
	if !ok {
		that2, ok := that.(ProfileList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResultSetSize != that1.ResultSetSize {
		return false
	}
	if this.HasMore != that1.HasMore {
		return false
	}
	if len(this.Profiles) != len(that1.Profiles) {
		return false
	}
	for i := range this.Profiles {
		if !this.Profiles[i].Equal(that1.Profiles[i]) {
			return false
		}
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Profile service

type ProfileClient interface {
	// Version method receives no paramaters and returns a version message.
	Version(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*VersionResponse, error)
	// ServicesStatus method receives no paramaters and returns all services status message
	ServicesStatus(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ServicesStatusList, error)
	// Create attempts to create a new profile.
	Create(ctx context.Context, in *ProfileCreationRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	// Read returns information about an existing profile.
	Read(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileInfo, error)
	// List returns a list of profiles matching a set of criteria.
	List(ctx context.Context, in *ProfileListRequest, opts ...grpc.CallOption) (*ProfileList, error)
	// Update attempts to update an existing profile.
	Update(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (*ProfileResponse, error)
	// SoftDelete attempts to delete an existing profile logically.
	SoftDelete(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	// HardDelete attempts to delete an existing profile physically.
	HardDelete(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponseLight, error)
}

type profileClient struct {
	cc *grpc.ClientConn
}

func NewProfileClient(cc *grpc.ClientConn) ProfileClient {
	return &profileClient{cc}
}

func (c *profileClient) Version(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := grpc.Invoke(ctx, "/grpc.gomeetexamples.profile.Profile/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) ServicesStatus(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ServicesStatusList, error) {
	out := new(ServicesStatusList)
	err := grpc.Invoke(ctx, "/grpc.gomeetexamples.profile.Profile/ServicesStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) Create(ctx context.Context, in *ProfileCreationRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := grpc.Invoke(ctx, "/grpc.gomeetexamples.profile.Profile/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) Read(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileInfo, error) {
	out := new(ProfileInfo)
	err := grpc.Invoke(ctx, "/grpc.gomeetexamples.profile.Profile/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) List(ctx context.Context, in *ProfileListRequest, opts ...grpc.CallOption) (*ProfileList, error) {
	out := new(ProfileList)
	err := grpc.Invoke(ctx, "/grpc.gomeetexamples.profile.Profile/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) Update(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := grpc.Invoke(ctx, "/grpc.gomeetexamples.profile.Profile/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) SoftDelete(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := grpc.Invoke(ctx, "/grpc.gomeetexamples.profile.Profile/SoftDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) HardDelete(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponseLight, error) {
	out := new(ProfileResponseLight)
	err := grpc.Invoke(ctx, "/grpc.gomeetexamples.profile.Profile/HardDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Profile service

type ProfileServer interface {
	// Version method receives no paramaters and returns a version message.
	Version(context.Context, *EmptyMessage) (*VersionResponse, error)
	// ServicesStatus method receives no paramaters and returns all services status message
	ServicesStatus(context.Context, *EmptyMessage) (*ServicesStatusList, error)
	// Create attempts to create a new profile.
	Create(context.Context, *ProfileCreationRequest) (*ProfileResponse, error)
	// Read returns information about an existing profile.
	Read(context.Context, *ProfileRequest) (*ProfileInfo, error)
	// List returns a list of profiles matching a set of criteria.
	List(context.Context, *ProfileListRequest) (*ProfileList, error)
	// Update attempts to update an existing profile.
	Update(context.Context, *ProfileInfo) (*ProfileResponse, error)
	// SoftDelete attempts to delete an existing profile logically.
	SoftDelete(context.Context, *ProfileRequest) (*ProfileResponse, error)
	// HardDelete attempts to delete an existing profile physically.
	HardDelete(context.Context, *ProfileRequest) (*ProfileResponseLight, error)
}

func RegisterProfileServer(s *grpc.Server, srv ProfileServer) {
	s.RegisterService(&_Profile_serviceDesc, srv)
}

func _Profile_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gomeetexamples.profile.Profile/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).Version(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_ServicesStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).ServicesStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gomeetexamples.profile.Profile/ServicesStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).ServicesStatus(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gomeetexamples.profile.Profile/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).Create(ctx, req.(*ProfileCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gomeetexamples.profile.Profile/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).Read(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gomeetexamples.profile.Profile/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).List(ctx, req.(*ProfileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gomeetexamples.profile.Profile/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).Update(ctx, req.(*ProfileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_SoftDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).SoftDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gomeetexamples.profile.Profile/SoftDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).SoftDelete(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_HardDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).HardDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gomeetexamples.profile.Profile/HardDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).HardDelete(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Profile_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.gomeetexamples.profile.Profile",
	HandlerType: (*ProfileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Profile_Version_Handler,
		},
		{
			MethodName: "ServicesStatus",
			Handler:    _Profile_ServicesStatus_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Profile_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Profile_Read_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Profile_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Profile_Update_Handler,
		},
		{
			MethodName: "SoftDelete",
			Handler:    _Profile_SoftDelete_Handler,
		},
		{
			MethodName: "HardDelete",
			Handler:    _Profile_HardDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/profile.proto",
}

func NewPopulatedEmptyMessage(r randyProfile, easy bool) *EmptyMessage {
	this := &EmptyMessage{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVersionResponse(r randyProfile, easy bool) *VersionResponse {
	this := &VersionResponse{}
	this.Name = string(randStringProfile(r))
	this.Version = string(randStringProfile(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedServiceStatus(r randyProfile, easy bool) *ServiceStatus {
	this := &ServiceStatus{}
	this.Name = string(randStringProfile(r))
	this.Version = string(randStringProfile(r))
	this.Status = ServiceStatus_Status([]int32{0, 1}[r.Intn(2)])
	this.EMsg = string(randStringProfile(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedServicesStatusList(r randyProfile, easy bool) *ServicesStatusList {
	this := &ServicesStatusList{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Services = make([]*ServiceStatus, v1)
		for i := 0; i < v1; i++ {
			this.Services[i] = NewPopulatedServiceStatus(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProfileInfo(r randyProfile, easy bool) *ProfileInfo {
	this := &ProfileInfo{}
	this.Uuid = string(randStringProfile(r))
	this.Gender = Genders([]int32{0, 1, 2}[r.Intn(3)])
	this.Email = string(randStringProfile(r))
	this.Name = string(randStringProfile(r))
	this.Birthday = string(randStringProfile(r))
	this.CreatedAt = string(randStringProfile(r))
	this.UpdatedAt = string(randStringProfile(r))
	this.DeletedAt = string(randStringProfile(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProfileRequest(r randyProfile, easy bool) *ProfileRequest {
	this := &ProfileRequest{}
	this.Uuid = string(randStringProfile(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProfileResponse(r randyProfile, easy bool) *ProfileResponse {
	this := &ProfileResponse{}
	this.Ok = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		this.Info = NewPopulatedProfileInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProfileResponseLight(r randyProfile, easy bool) *ProfileResponseLight {
	this := &ProfileResponseLight{}
	this.Ok = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProfileCreationRequest(r randyProfile, easy bool) *ProfileCreationRequest {
	this := &ProfileCreationRequest{}
	this.Gender = Genders([]int32{0, 1, 2}[r.Intn(3)])
	this.Email = string(randStringProfile(r))
	this.Name = string(randStringProfile(r))
	this.Birthday = string(randStringProfile(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProfileListRequest(r randyProfile, easy bool) *ProfileListRequest {
	this := &ProfileListRequest{}
	this.PageNumber = uint32(r.Uint32())
	this.PageSize = uint32(r.Uint32())
	this.Order = string(randStringProfile(r))
	this.ExcludeSoftDeleted = bool(bool(r.Intn(2) == 0))
	this.SoftDeletedOnly = bool(bool(r.Intn(2) == 0))
	this.Gender = Genders([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProfileList(r randyProfile, easy bool) *ProfileList {
	this := &ProfileList{}
	this.ResultSetSize = uint32(r.Uint32())
	this.HasMore = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Profiles = make([]*ProfileInfo, v2)
		for i := 0; i < v2; i++ {
			this.Profiles[i] = NewPopulatedProfileInfo(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyProfile interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneProfile(r randyProfile) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringProfile(r randyProfile) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneProfile(r)
	}
	return string(tmps)
}
func randUnrecognizedProfile(r randyProfile, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldProfile(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldProfile(dAtA []byte, r randyProfile, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateProfile(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateProfile(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateProfile(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateProfile(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateProfile(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateProfile(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateProfile(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}

func init() { proto.RegisterFile("pb/profile.proto", fileDescriptorProfile) }
func init() { golang_proto.RegisterFile("pb/profile.proto", fileDescriptorProfile) }

var fileDescriptorProfile = []byte{
	// 1443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xcb, 0x6f, 0x1b, 0x55,
	0x17, 0xcf, 0xf5, 0x63, 0xec, 0x9c, 0x34, 0x89, 0x73, 0x5b, 0xb5, 0x4e, 0xbe, 0x36, 0x49, 0xa7,
	0xe9, 0xf7, 0x39, 0x8f, 0xf1, 0xcc, 0x38, 0x69, 0xbf, 0x24, 0x3c, 0x52, 0x1b, 0x9a, 0x52, 0x35,
	0x49, 0xab, 0x09, 0x2d, 0xa2, 0x8e, 0x6b, 0x8d, 0x3d, 0xd7, 0xce, 0x10, 0xdb, 0x63, 0xe6, 0x8e,
	0xd3, 0x36, 0x89, 0x59, 0x80, 0x54, 0x36, 0x20, 0x16, 0x5d, 0xb0, 0x47, 0x42, 0x82, 0xca, 0x0b,
	0x96, 0x65, 0xc7, 0xda, 0x5b, 0xd6, 0x28, 0x22, 0xc0, 0x02, 0xfe, 0x02, 0x96, 0x68, 0xee, 0x8c,
	0x1f, 0x49, 0x44, 0xb0, 0x29, 0x02, 0xb1, 0xf2, 0x7d, 0x9c, 0xdf, 0x39, 0xbf, 0x7b, 0x5e, 0x73,
	0x0c, 0xa1, 0x72, 0x46, 0x2c, 0x9b, 0x46, 0x4e, 0x2f, 0x90, 0x68, 0xd9, 0x34, 0x2c, 0x03, 0xff,
	0x27, 0x6f, 0x96, 0xb3, 0xd1, 0xbc, 0x51, 0x24, 0xc4, 0x22, 0x8f, 0xd4, 0x62, 0xb9, 0x40, 0x68,
	0xd4, 0x15, 0x19, 0x39, 0x9f, 0x37, 0x8c, 0x7c, 0x81, 0x88, 0x6a, 0x59, 0x17, 0xd5, 0x52, 0xc9,
	0xb0, 0x54, 0x4b, 0x37, 0x4a, 0xd4, 0x81, 0x8e, 0x5c, 0xcd, 0xeb, 0xd6, 0x66, 0x25, 0x13, 0xcd,
	0x1a, 0x45, 0xb1, 0xf8, 0x50, 0xb7, 0xb6, 0x8c, 0x87, 0x62, 0xde, 0x10, 0xd8, 0xa5, 0xb0, 0xad,
	0x16, 0x74, 0x4d, 0xb5, 0x0c, 0x93, 0x8a, 0xcd, 0xa5, 0x8b, 0x9b, 0x6f, 0xc3, 0x39, 0x86, 0x5b,
	0x30, 0x67, 0x9f, 0x53, 0xb7, 0x88, 0x29, 0xb6, 0xad, 0x5d, 0xa4, 0x70, 0x08, 0x99, 0x37, 0x44,
	0x76, 0x9c, 0xa9, 0xe4, 0xd8, 0x8e, 0x6d, 0xd8, 0xca, 0x11, 0xe7, 0x07, 0xe0, 0xd4, 0xf5, 0x62,
	0xd9, 0x7a, 0xbc, 0x4a, 0x28, 0x55, 0xf3, 0x84, 0x5f, 0x87, 0xc1, 0x7b, 0xc4, 0xa4, 0xba, 0x51,
	0x52, 0x08, 0x2d, 0x1b, 0x25, 0x4a, 0xf0, 0x79, 0xf0, 0x95, 0xd4, 0x22, 0x09, 0xa3, 0x71, 0x14,
	0xe9, 0x4d, 0x04, 0xeb, 0x35, 0xce, 0x37, 0xe5, 0x09, 0x21, 0x85, 0x9d, 0x62, 0x1e, 0x02, 0xdb,
	0x0e, 0x20, 0xec, 0x69, 0x17, 0x08, 0x23, 0xa5, 0x71, 0xc1, 0x7f, 0x87, 0xa0, 0x7f, 0x9d, 0x98,
	0xdb, 0x7a, 0x96, 0xac, 0x5b, 0xaa, 0x55, 0xa1, 0x2f, 0xae, 0x13, 0xdf, 0x04, 0x8e, 0x32, 0x5d,
	0x61, 0xef, 0x38, 0x8a, 0x0c, 0xc4, 0xe4, 0xe8, 0x09, 0x51, 0x8a, 0x1e, 0xb2, 0x1e, 0x75, 0x7e,
	0x14, 0x57, 0x01, 0x3e, 0x0f, 0x7e, 0x92, 0x2e, 0xd2, 0x7c, 0xd8, 0xc7, 0x8c, 0x05, 0xea, 0x35,
	0xce, 0xfb, 0x1c, 0x21, 0xc5, 0x47, 0x56, 0x69, 0x9e, 0xbf, 0x08, 0x9c, 0x4b, 0x9a, 0x03, 0xcf,
	0xed, 0x5b, 0xa1, 0x1e, 0x3c, 0x08, 0x7d, 0x77, 0xd7, 0xe2, 0xf7, 0xe2, 0x37, 0x57, 0xe2, 0x89,
	0x95, 0xeb, 0x21, 0xc4, 0x6f, 0x00, 0x76, 0x0d, 0x50, 0x47, 0x74, 0x45, 0xa7, 0x16, 0x5e, 0x86,
	0x20, 0x75, 0x4f, 0xc3, 0x68, 0xdc, 0x1b, 0xe9, 0x8b, 0x4d, 0x75, 0xce, 0x51, 0x69, 0x62, 0xf9,
	0x9f, 0xfc, 0xd0, 0x77, 0xc7, 0x91, 0xb9, 0x59, 0xca, 0x19, 0xb8, 0x0a, 0xbe, 0x4a, 0x45, 0xd7,
	0x5c, 0xdf, 0xe9, 0xf5, 0x1a, 0xc7, 0x61, 0x1f, 0xf6, 0xdc, 0x9b, 0x3b, 0xd8, 0x1f, 0x4b, 0xc2,
	0xdb, 0x0f, 0x92, 0xaa, 0x90, 0x8b, 0x0b, 0xcb, 0x92, 0xb0, 0x90, 0xda, 0x9d, 0xaf, 0x0a, 0xed,
	0xdb, 0xb9, 0xaa, 0x30, 0xd7, 0xbe, 0x9f, 0xad, 0x0a, 0xc9, 0xf9, 0xbd, 0x85, 0x3d, 0x35, 0xbe,
	0x97, 0x49, 0xa4, 0x8e, 0xde, 0xb4, 0x6d, 0xe5, 0x58, 0x75, 0x42, 0x61, 0x66, 0xf1, 0x32, 0x70,
	0x79, 0x52, 0xd2, 0x88, 0xc9, 0x62, 0x33, 0x10, 0x9b, 0x38, 0xf1, 0x51, 0x37, 0x98, 0x28, 0x75,
	0x22, 0x38, 0xe2, 0x99, 0x47, 0x8a, 0x8b, 0xc6, 0xcf, 0x10, 0xf8, 0x49, 0x51, 0xd5, 0x0b, 0x2c,
	0x80, 0xbd, 0x89, 0xa7, 0xc8, 0x16, 0xd9, 0xf1, 0x84, 0xd0, 0xc1, 0xfe, 0xd8, 0x13, 0x04, 0x1f,
	0x20, 0xfb, 0x25, 0x3b, 0x71, 0xe1, 0xbe, 0x24, 0x2c, 0x44, 0x2f, 0x5e, 0x9a, 0xb8, 0xfc, 0xdf,
	0xff, 0x4d, 0x4d, 0x8b, 0xaf, 0x2c, 0x3d, 0x48, 0xef, 0xee, 0x55, 0xdf, 0x13, 0x52, 0xd3, 0xd7,
	0x5a, 0xf7, 0xa9, 0xc8, 0xd2, 0x62, 0x6b, 0x27, 0xa4, 0x76, 0xa5, 0x99, 0xab, 0x72, 0xb5, 0xed,
	0x7e, 0x72, 0x29, 0xb2, 0xb4, 0xb8, 0x11, 0xed, 0x0a, 0x31, 0x39, 0x35, 0xa1, 0x38, 0x14, 0xf1,
	0x65, 0x37, 0x5f, 0x9d, 0x0c, 0x19, 0x72, 0x98, 0x46, 0x6c, 0xa6, 0xfe, 0x32, 0x7a, 0xf4, 0x69,
	0x23, 0x71, 0x0d, 0x08, 0x66, 0x74, 0xd3, 0xda, 0xd4, 0xd4, 0xc7, 0x61, 0x3f, 0x13, 0x5d, 0xaf,
	0xd7, 0xb8, 0xde, 0x67, 0x88, 0x8b, 0xf9, 0x82, 0x43, 0xa1, 0xec, 0xc1, 0xfe, 0x58, 0x02, 0xae,
	0x3d, 0x88, 0xc8, 0x0b, 0x7b, 0x31, 0x69, 0x72, 0x43, 0xdb, 0xd0, 0x92, 0xc2, 0xb8, 0x18, 0x4d,
	0x45, 0xa4, 0xa4, 0x2c, 0x2c, 0xa4, 0xf6, 0xe4, 0xa4, 0x24, 0xc7, 0x52, 0x93, 0x87, 0x0f, 0x93,
	0x72, 0x2c, 0x95, 0xb4, 0x19, 0xed, 0xcd, 0x26, 0x25, 0x39, 0x35, 0x39, 0xa1, 0x34, 0x8d, 0xe0,
	0x04, 0x40, 0xd6, 0x24, 0xaa, 0x45, 0xb4, 0xb4, 0x6a, 0x85, 0x39, 0x66, 0xf2, 0x52, 0xbd, 0xc6,
	0x8d, 0x65, 0x2e, 0xe0, 0xe1, 0x98, 0x24, 0x5d, 0x15, 0x24, 0x59, 0x90, 0x62, 0x6f, 0xca, 0x57,
	0x16, 0xa5, 0xb9, 0x45, 0xe9, 0xca, 0x7d, 0xe9, 0xff, 0x8b, 0x92, 0x34, 0x8f, 0x94, 0x5e, 0x17,
	0x16, 0xb7, 0x6c, 0x1d, 0x95, 0xb2, 0xd6, 0xd0, 0x11, 0xe8, 0x42, 0x87, 0x0b, 0x73, 0x74, 0x68,
	0xa4, 0x40, 0x5c, 0x1d, 0xc1, 0x2e, 0x74, 0xb8, 0xb0, 0xb8, 0xc5, 0x7f, 0x82, 0x60, 0xc0, 0xcd,
	0x73, 0x85, 0xbc, 0x5b, 0x21, 0xd4, 0xfa, 0x87, 0x53, 0x9d, 0x7f, 0x07, 0x06, 0x9b, 0x84, 0xdc,
	0x66, 0x38, 0x0c, 0x1e, 0x63, 0x8b, 0xf1, 0x09, 0x26, 0x7a, 0xeb, 0x35, 0xce, 0x0f, 0x5e, 0x8c,
	0x64, 0xc5, 0x63, 0x6c, 0xe1, 0x97, 0xc1, 0xa7, 0x97, 0x72, 0x06, 0x2b, 0x8b, 0xbe, 0x58, 0xe4,
	0xc4, 0xb2, 0x68, 0xab, 0x67, 0x85, 0xa1, 0x78, 0x19, 0xce, 0x1c, 0xb1, 0xb5, 0xa2, 0xe7, 0x37,
	0xad, 0x13, 0x0c, 0xf2, 0x9f, 0x7b, 0xe1, 0xac, 0x8b, 0x79, 0xcd, 0x8e, 0x26, 0x6b, 0xda, 0x8e,
	0xe3, 0x5a, 0x45, 0x8a, 0xfe, 0xa2, 0x22, 0xf5, 0xfc, 0x7b, 0x8a, 0xd4, 0xdb, 0x79, 0x91, 0xfa,
	0xfe, 0x86, 0x22, 0xe5, 0x7f, 0xf1, 0x00, 0x76, 0xe3, 0x64, 0x7f, 0x18, 0x1a, 0x31, 0x92, 0xa0,
	0xaf, 0xac, 0xe6, 0x49, 0xba, 0x54, 0x29, 0x66, 0xdc, 0x40, 0xf5, 0x27, 0x06, 0x9b, 0x21, 0x3e,
	0xd8, 0x1f, 0xf3, 0x84, 0x7a, 0x14, 0xb0, 0x65, 0xd6, 0x98, 0x08, 0x96, 0xa1, 0x97, 0x21, 0xa8,
	0xbe, 0x43, 0x58, 0x40, 0xfa, 0x13, 0x67, 0xea, 0x35, 0x2e, 0x00, 0x7e, 0xec, 0x8d, 0x49, 0x92,
	0xfd, 0xd0, 0x50, 0x4f, 0xf8, 0xe7, 0x80, 0x12, 0xb4, 0xc5, 0xd6, 0xf5, 0x1d, 0x82, 0x67, 0xc0,
	0x6f, 0x98, 0x76, 0x1e, 0x38, 0x4e, 0x39, 0x5b, 0xaf, 0x71, 0x18, 0x42, 0x78, 0xa0, 0xd5, 0x35,
	0xc6, 0x55, 0x9a, 0x55, 0x1c, 0x21, 0xfc, 0x2a, 0x9c, 0x21, 0x8f, 0xb2, 0x85, 0x8a, 0x46, 0xd2,
	0xd4, 0xc8, 0x59, 0x69, 0xb7, 0x38, 0x99, 0x9b, 0x82, 0x89, 0x53, 0xf5, 0x1a, 0x17, 0x04, 0x0e,
	0xfb, 0x2c, 0xb3, 0x42, 0x14, 0xec, 0x4a, 0xae, 0x1b, 0x39, 0xeb, 0x75, 0x47, 0x0e, 0x2f, 0xc0,
	0x50, 0x3b, 0x2e, 0x6d, 0x94, 0x0a, 0x4e, 0x23, 0x0c, 0x26, 0xfa, 0x6d, 0x1f, 0x43, 0x00, 0xfb,
	0x73, 0x6a, 0x81, 0x12, 0x65, 0x90, 0xb6, 0x60, 0xb7, 0x4b, 0x85, 0xc7, 0x6d, 0x19, 0xcb, 0xbd,
	0x48, 0xc6, 0xf2, 0x5f, 0xa3, 0xe6, 0xd7, 0x92, 0x7d, 0x85, 0x65, 0x18, 0x34, 0x09, 0xad, 0x14,
	0xac, 0x34, 0x25, 0x96, 0xe3, 0x39, 0xc7, 0xd3, 0xcd, 0x62, 0xba, 0xa2, 0xf4, 0x3b, 0x12, 0xeb,
	0xc4, 0x62, 0x3e, 0x8b, 0x40, 0x70, 0x53, 0xa5, 0xe9, 0xa2, 0x61, 0x3a, 0x5e, 0x3e, 0x46, 0x3e,
	0xb0, 0xa9, 0xd2, 0x55, 0xc3, 0x24, 0x78, 0x15, 0x82, 0x2e, 0x23, 0x7b, 0x0c, 0xf1, 0x76, 0x53,
	0xf6, 0xce, 0x98, 0xf1, 0x15, 0xf2, 0x2b, 0x4d, 0x15, 0x53, 0xd3, 0x10, 0x70, 0x1f, 0x86, 0x01,
	0xb8, 0xbb, 0x6b, 0xb7, 0xd6, 0x6e, 0xbf, 0x15, 0xea, 0xc1, 0x41, 0xf0, 0xad, 0xc6, 0xed, 0x41,
	0xc3, 0x3e, 0x5d, 0xbe, 0xce, 0xd6, 0x9e, 0xd8, 0x97, 0x41, 0x08, 0xb8, 0xfa, 0xf0, 0x2e, 0x04,
	0xdc, 0xa9, 0x0d, 0x4f, 0x9e, 0x48, 0xa0, 0x7d, 0xd6, 0x1b, 0x99, 0x39, 0x51, 0xf4, 0xc8, 0x18,
	0xc8, 0x9f, 0x7b, 0xff, 0xdb, 0x1f, 0x9f, 0x7a, 0x86, 0xf0, 0x20, 0x1b, 0x75, 0xb7, 0x65, 0xb1,
	0x31, 0x89, 0x7d, 0x8c, 0x60, 0xe0, 0xf0, 0xf8, 0xd3, 0x0d, 0x09, 0xb1, 0x93, 0x99, 0xa8, 0x6d,
	0xac, 0xe2, 0xc7, 0x18, 0x8f, 0x61, 0x7c, 0xae, 0xc1, 0xa3, 0x31, 0x28, 0x89, 0xee, 0x38, 0xf7,
	0x04, 0x01, 0xc7, 0xfa, 0x21, 0xc1, 0xb3, 0x9d, 0x44, 0xe3, 0x48, 0xef, 0xfc, 0x03, 0xb7, 0x1c,
	0x69, 0xd2, 0xfc, 0x30, 0xa3, 0x73, 0x9a, 0x1f, 0x68, 0xd0, 0x71, 0x2a, 0x6b, 0x11, 0x4d, 0xe1,
	0x6d, 0xf0, 0x29, 0x44, 0xd5, 0xf0, 0x74, 0x67, 0x0a, 0x1d, 0xeb, 0x1d, 0x27, 0x50, 0x23, 0x20,
	0xfc, 0xa9, 0x86, 0x65, 0x93, 0xa8, 0x9a, 0x6d, 0x77, 0x07, 0x7c, 0x2c, 0xf5, 0xc5, 0x4e, 0x54,
	0xb5, 0x75, 0xa4, 0xce, 0x6c, 0xb3, 0x20, 0x1c, 0xb3, 0x5d, 0xd0, 0xa9, 0x65, 0xdb, 0xde, 0x05,
	0xee, 0x2e, 0x9b, 0x0a, 0x70, 0xc7, 0x0f, 0x79, 0x51, 0x87, 0x3b, 0x53, 0x88, 0x6d, 0xfc, 0x43,
	0x04, 0xd0, 0x6a, 0x47, 0xdd, 0xf9, 0xbd, 0x3b, 0x12, 0xa3, 0x8c, 0x44, 0x98, 0x3f, 0xdd, 0x4c,
	0xc2, 0x56, 0xdb, 0xb3, 0x99, 0x7c, 0x84, 0x00, 0xde, 0x50, 0x4d, 0xed, 0xcf, 0x30, 0x91, 0xbb,
	0x61, 0xc2, 0x86, 0x84, 0xe3, 0x74, 0x36, 0x55, 0x53, 0x6b, 0xd1, 0x49, 0x68, 0xbf, 0x7e, 0x3f,
	0x8a, 0xbe, 0x38, 0x18, 0x45, 0xcf, 0x0f, 0x46, 0xd1, 0x37, 0x3f, 0x8c, 0x22, 0xb8, 0x90, 0x35,
	0x8a, 0xbf, 0x67, 0x62, 0x5b, 0xbe, 0x3f, 0x73, 0xec, 0xff, 0xa7, 0xd0, 0x10, 0x13, 0xe9, 0x76,
	0x56, 0x70, 0x45, 0xc5, 0x72, 0xe6, 0xa5, 0x72, 0xe6, 0x33, 0x8f, 0xef, 0xc6, 0xea, 0x9d, 0x44,
	0x86, 0x63, 0x7f, 0x29, 0x67, 0x7f, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x8a, 0x1f, 0x45, 0x42,
	0x0f, 0x00, 0x00,
}
