// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source: pb/profile.proto
package functest

import (
	"bytes"
	"fmt"
	"net/http"

	"github.com/golang/protobuf/jsonpb"

	pb "github.com/gomeet-examples/svc-profile/pb"
)

func TestHttpEcho(config FunctionalTestConfig) (failures []TestFailure) {
	client, serverAddr, proto, err := httpClient(config)
	if err != nil {
		failures = append(failures, TestFailure{Procedure: "ProfileRead/HTTP", Message: fmt.Sprintf("HTTP client initialization error (%v)", err)})
		return failures
	}

	var testCaseResults []*TestCaseResult
	for _, req := range testGetEchoRequest() {
		url := fmt.Sprintf("%s://%s/api/v1/echo", proto, serverAddr)

		// Proto to JSON
		ma := jsonpb.Marshaler{}
		sMsg, err := ma.MarshalToString(req)
		if err != nil {
			testCaseResults = append(
				testCaseResults,
				&TestCaseResult{
					req,
					nil,
					fmt.Errorf("Echo/HTTP POST error to marshalling the message with %s (%v) - %v", url, err, req),
				},
			)
			continue
		}

		data := bytes.NewBufferString(sMsg)

		// construct HTTP request
		httpReq, err := http.NewRequest("POST", url, data)
		if err != nil {
			testCaseResults = append(
				testCaseResults,
				&TestCaseResult{
					req,
					nil,
					fmt.Errorf("Echo/HTTP POST error to construct the http request with %s (%v) - %v", url, err, req),
				},
			)
			continue
		}
		httpReq.Header.Add("Authorization", fmt.Sprintf("Bearer %s", config.JsonWebToken))
		httpReq.Header.Add("Content-Type", "application/json")

		resp, err := client.Do(httpReq)
		if err != nil {
			testCaseResults = append(
				testCaseResults,
				&TestCaseResult{
					req,
					nil,
					fmt.Errorf("Echo/HTTP POST error on %s (%v) - %v", url, err, req),
				},
			)
			continue
		}
		defer resp.Body.Close()

		res := &pb.EchoResponse{}
		err = jsonpb.Unmarshal(resp.Body, res)
		testCaseResults = append(testCaseResults, &TestCaseResult{req, res, err})
	}

	return testEchoResponse(FUNCTEST_HTTP, testCaseResults)
}
