// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source: pb/profile.proto
package functest

import (
	"fmt"
	"net/http"

	"github.com/golang/protobuf/jsonpb"

	pb "github.com/gomeet-examples/svc-profile/pb"
)

func TestHttpServicesStatus(config FunctionalTestConfig) []TestFailure {
	var failures []TestFailure

	client, serverAddr, proto, err := httpClient(config)
	if err != nil {
		failures = append(failures, TestFailure{Procedure: "ServicesStatus/HTTP", Message: fmt.Sprintf("HTTP client initialization error (%v)", err)})
		return failures
	}

	url := fmt.Sprintf("%s://%s/api/v1/services/status", proto, serverAddr)

	req, err := http.NewRequest("GET", url, nil)
	req.Header.Add("Authorization", fmt.Sprintf("Bearer %s", config.JsonWebToken))
	req.Header.Add("Content-Type", "application/json")

	resp, err := client.Do(req)
	if err != nil {
		failures = append(failures, TestFailure{Procedure: "ServicesStatus/HTTP", Message: fmt.Sprintf("HTTP GET error on %s (%v)", url, err)})
		return failures
	}
	defer resp.Body.Close()

	res := &pb.ServicesStatusList{}
	err = jsonpb.Unmarshal(resp.Body, res)
	if err != nil {
		failures = append(failures, TestFailure{Procedure: "ServicesStatus/HTTP", Message: fmt.Sprintf("JSON parsing error (%v)", err)})
		return failures
	}

	return testServicesStatusReponse(&pb.EmptyMessage{}, res)
}
