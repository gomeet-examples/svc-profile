// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source: pb/profile.proto
package functest

import (
	"fmt"
	"net/http"

	"github.com/golang/protobuf/jsonpb"

	pb "github.com/gomeet-examples/svc-profile/pb"
)

func TestHttpVersion(config FunctionalTestConfig) (failures []TestFailure) {
	client, serverAddr, proto, err := httpClient(config)
	if err != nil {
		failures = append(failures, TestFailure{Procedure: "Version/HTTP", Message: fmt.Sprintf("HTTP client initialization error (%v)", err)})
		return failures
	}

	req := &pb.EmptyMessage{}
	url := fmt.Sprintf("%s://%s/api/v1/version", proto, serverAddr)

	httpReq, err := http.NewRequest("GET", url, nil)

	httpReq.Header.Add("Authorization", fmt.Sprintf("Bearer %s", config.JsonWebToken))
	httpReq.Header.Add("Content-Type", "application/json")

	resp, err := client.Do(httpReq)
	if err != nil {
		failures = append(failures, TestFailure{Procedure: "Version/HTTP", Message: fmt.Sprintf("HTTP GET error on %s (%v)", url, err)})
		return failures
	}
	defer resp.Body.Close()

	res := &pb.VersionResponse{}
	err = jsonpb.Unmarshal(resp.Body, res)
	if err != nil {
		failures = append(failures, TestFailure{Procedure: "Version/HTTP", Message: fmt.Sprintf("JSON parsing error (%v)", err)})
		return failures
	}

	return testVersionResponse(req, res)
}
