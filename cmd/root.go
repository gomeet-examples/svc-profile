// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source: pb/profile.proto
package cmd

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"

	"github.com/gomeet-examples/svc-profile/service"
)

var (
	cfgFile           string
	caCertificate     string
	serverCertificate string
	serverPrivateKey  string
	clientCertificate string
	clientPrivateKey  string
	timeoutSeconds    int
	jwtToken          string
	svc               = service.NewService()
	svcName           = fmt.Sprintf("%s-%s", svc.Name, svc.Version)

	// RootCmd This represents the base command when called without any subcommands
	RootCmd = &cobra.Command{
		Use:   "svc-profile",
		Short: "Gomeetexamples's profile microservice",
		Long: `To get started run the serve subcommand which will start a server:

  $ svc-profile serve
  $ svc-profile serve -p 42000

Then you can hit it with the client:
  $ svc-profile cli version
  $ svc-profile cli services_status
  $ svc-profile cli echo <uuid [string]> <content [string]>
  $ svc-profile cli --address localhost:42000 version

Or over HTTP/1.1 with curl:
  $ curl -X GET    http://localhost:13000/api/v1/version
  $ curl -X GET    http://localhost:13000/api/v1/services/status
  $ curl -X POST   http://localhost:13000/api/v1/echo -d '{"uuid": "<string>", "content": "<string>"}'
  $ curl -X GET    http://localhost:13000/
  $ curl -X GET    http://localhost:13000/version
  $ curl -X GET    http://localhost:13000/metrics
  $ curl -X GET    http://localhost:13000/status
  $ curl -X GET    http://localhost:42000/version

Or via an interactive console :

  $ svc-profile console
  $ svc-profile console --address localhost:42000

`,
		// Uncomment the following line if your bare application
		// has an action associated with it:
		//	Run: func(cmd *cobra.Command, args []string) { },
	}
)

// Execute adds all child commands to the root command sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the RootCmd.
func Execute() {
	if err := RootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(-1)
	}
}

func init() {
	cobra.OnInitialize(initConfig)

	// Here you will define your flags and configuration settings.
	// Cobra supports Persistent Flags, which, if defined here,
	// will be global for your application.

	RootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is $HOME/.svc-profile.yaml)")
	// Cobra also supports local flags, which will only run
	// when this action is called directly.
	// RootCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}

// initConfig reads in config file and ENV variables if set.
func initConfig() {
	if cfgFile != "" { // enable ability to specify config file via flag
		viper.SetConfigFile(cfgFile)
	}

	viper.SetConfigName(".svc-profile") // name of config file (without extension)
	viper.AddConfigPath("$HOME")        // adding home directory as first search path
	viper.AutomaticEnv()                // read in environment variables that match

	// If a config file is found, read it in.
	if err := viper.ReadInConfig(); err == nil {
		fmt.Println("Using config file:", viper.ConfigFileUsed())
	}
}
